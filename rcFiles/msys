#!/bin/bash

alias man='tldr'

# PS1 - We only customize this when we are running linux
# Wrapping things in escaped square brackets will not count towards the total line character count, this we do this for most color codes
parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_OCHRE="\033[38;5;95m"
COLOR_BLUE="\033[0;34m"
COLOR_WHITE="\033[0;37m"
COLOR_RESET="\033[0m"

function git_color {
  local git_status="$(git status 2> /dev/null)"

  if [[ $git_status =~ "Changes not staged for commit" ]]; then
    echo -e $COLOR_BLUE
  elif [[ $git_status =~ "Changes to be committed" ]]; then
    echo -e $COLOR_BLUE
  elif [[ $git_status =~ "Your branch is ahead of" ]]; then
    echo -e $COLOR_YELLOW
  elif [[ $git_status =~ "working tree clean" ]]; then
    echo -e $COLOR_GREEN
  else
    echo -e $COLOR_RED
  fi
}

function git_branch {
  local git_status="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}]*)"

  if [[ $git_status =~ $on_branch ]]; then
    local branch=${BASH_REMATCH[1]}
    echo "($branch) "
  elif [[ $git_status =~ $on_commit ]]; then
    local commit=${BASH_REMATCH[1]}
    echo "($commit) "
  fi
}

function get_ps1 {
  local colorReset="\[\e[0m\]"
  local colorDevice="\[\e[38;5;217m\]"
  local colorPath="\[\e[38;5;14m\]"

  local device="$colorDevice\u@\h$colorReset"
  local currentPath="$colorPath\w$colorReset"

  # Checking for virutal env
  if [ ! -v $VIRTUAL_ENV ]; then
    local penv_prompt="${VIRTUAL_ENV##*\\}"
    penv_prompt="${penv_prompt%%-*}"
    penv_prompt="($COLOR_OCHRE$penv_prompt$COLOR_RESET) "
  fi
    
  echo -e "$penv_prompt\[\e]0;\u@\h:\w\a\]${debian_chroot:+($debian_chroot)}$device:$currentPath \[\$(git_color)\]\$(git_branch)$colorResetâ‚¬ "
}

export PS1=$(get_ps1)
